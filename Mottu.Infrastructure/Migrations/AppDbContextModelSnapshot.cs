// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mottu.Infrastructure.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mottu.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mottu.Domain.Entities.AcceptedOrder", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("AcceptedDate")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("Accepted_Date");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("Accepted_Orders", (string)null);
                });

            modelBuilder.Entity("Mottu.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Cnh")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("CNH");

                    b.Property<Guid?>("CnhTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("CNPJ");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active");

                    b.Property<bool>("IsDelivering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Delivering");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<string>("PathCnhImage")
                        .HasColumnType("text")
                        .HasColumnName("Path_CNH_Image");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CnhTypeId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Mottu.Domain.Entities.Bike", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLeased")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Model");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.HasIndex("Plate")
                        .IsUnique()
                        .HasDatabaseName("Plate");

                    b.ToTable("Bike", (string)null);
                });

            modelBuilder.Entity("Mottu.Domain.Entities.CnhType", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Cnh_Type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d033098-629f-4ba3-8809-f9366b203e9b"),
                            Name = "A"
                        },
                        new
                        {
                            Id = new Guid("9cad5cf7-688d-47f8-be52-49c51c174102"),
                            Name = "B"
                        },
                        new
                        {
                            Id = new Guid("19e1b2f3-45f5-4351-b467-000c40abd9d5"),
                            Name = "AB"
                        },
                        new
                        {
                            Id = new Guid("f4958544-c796-43f4-a3cb-568ef6272a8d"),
                            Name = "NA"
                        });
                });

            modelBuilder.Entity("Mottu.Domain.Entities.DeliveredOrder", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("DeliveredDate")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("Delivered_Date");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("Delivered_Orders", (string)null);
                });

            modelBuilder.Entity("Mottu.Domain.Entities.NotificatedUser", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("NotificationDate")
                        .HasColumnType("date")
                        .HasColumnName("Notification_Date");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("Notificated_User", (string)null);
                });

            modelBuilder.Entity("Mottu.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("NotificationDate")
                        .HasColumnType("date")
                        .HasColumnName("Notification_Date");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Mottu.Domain.Entities.Order", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOrder")
                        .HasColumnType("date")
                        .HasColumnName("Date_Order");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<Guid?>("StatusOrderId")
                        .HasColumnType("uuid");

                    b.Property<double>("ValueOrder")
                        .HasColumnType("double precision")
                        .HasColumnName("Value_Order");

                    b.HasKey("Id");

                    b.HasIndex("StatusOrderId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Mottu.Domain.Entities.Plan", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("DailyValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Daily_Value");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<int>("FinePercentage")
                        .HasColumnType("integer")
                        .HasColumnName("Fine_Percentage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<int>("NumDays")
                        .HasColumnType("integer")
                        .HasColumnName("Num_Days");

                    b.HasKey("Id");

                    b.ToTable("Plan", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("22c5dcc2-df8c-4b16-99a5-08723c923fcc"),
                            DailyValue = 30.0,
                            Description = "Plano de locação de 7 dias",
                            FinePercentage = 20,
                            Name = "Plano 7 dias",
                            NumDays = 7
                        },
                        new
                        {
                            Id = new Guid("f2299bcd-cbc5-4ca1-95b7-b2102d8f04ce"),
                            DailyValue = 28.0,
                            Description = "Plano de locação de 15 dias",
                            FinePercentage = 40,
                            Name = "Plano 15 dias",
                            NumDays = 15
                        },
                        new
                        {
                            Id = new Guid("bf1bb59b-736f-4825-93c5-a1deb2559b0b"),
                            DailyValue = 22.0,
                            Description = "Plano de locação de 30 dias",
                            FinePercentage = 60,
                            Name = "Plano 30 dias",
                            NumDays = 30
                        });
                });

            modelBuilder.Entity("Mottu.Domain.Entities.Rental", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BikeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("Creation_Date");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("End_Date");

                    b.Property<DateOnly>("InitialDate")
                        .HasColumnType("date")
                        .HasColumnName("Initial_Date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Active");

                    b.Property<int>("NumMoreDailys")
                        .HasColumnType("integer")
                        .HasColumnName("Num_More_Dailys");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("PredictionDate")
                        .HasColumnType("date")
                        .HasColumnName("Predition_Date");

                    b.Property<double>("TotalValue")
                        .HasColumnType("double precision")
                        .HasColumnName("Total_Value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BikeId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Rental", (string)null);
                });

            modelBuilder.Entity("Mottu.Domain.Entities.StatusOrder", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Status_Order", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f52a152a-415a-4226-979e-b7aebb34b3c0"),
                            Name = "DISPONÍVEL"
                        },
                        new
                        {
                            Id = new Guid("610cdbb5-5ec7-4f2f-87ee-ac6381e130c2"),
                            Name = "ACEITO"
                        },
                        new
                        {
                            Id = new Guid("5e5ce78b-a5a9-41b4-80ca-5705b9c6b556"),
                            Name = "ENTREGUE"
                        });
                });

            modelBuilder.Entity("Mottu.Domain.Entities.UserType", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("User_Type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc255338-9599-4a0f-827f-4546ddfe0098"),
                            Name = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = new Guid("ceba16aa-dafe-45ad-b0ad-368fc0e72f44"),
                            Name = "ENTREGADOR"
                        },
                        new
                        {
                            Id = new Guid("fa3327af-df72-4c87-aae5-f16276c4bc1a"),
                            Name = "CONSUMIDOR"
                        });
                });

            modelBuilder.Entity("Mottu.Domain.Entities.AcceptedOrder", b =>
                {
                    b.HasOne("Mottu.Domain.Entities.Order", "Order")
                        .WithMany("AcceptedOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mottu.Domain.Entities.AppUser", "User")
                        .WithMany("AcceptedOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mottu.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("Mottu.Domain.Entities.CnhType", "CnhType")
                        .WithMany()
                        .HasForeignKey("CnhTypeId");

                    b.HasOne("Mottu.Domain.Entities.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId");

                    b.Navigation("CnhType");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Mottu.Domain.Entities.DeliveredOrder", b =>
                {
                    b.HasOne("Mottu.Domain.Entities.Order", "Order")
                        .WithMany("DeliveredOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mottu.Domain.Entities.AppUser", "User")
                        .WithMany("DeliveredOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mottu.Domain.Entities.NotificatedUser", b =>
                {
                    b.HasOne("Mottu.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificatedUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mottu.Domain.Entities.AppUser", "User")
                        .WithMany("NotificatedUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mottu.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Mottu.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Mottu.Domain.Entities.Order", b =>
                {
                    b.HasOne("Mottu.Domain.Entities.StatusOrder", "StatusOrder")
                        .WithMany()
                        .HasForeignKey("StatusOrderId");

                    b.Navigation("StatusOrder");
                });

            modelBuilder.Entity("Mottu.Domain.Entities.Rental", b =>
                {
                    b.HasOne("Mottu.Domain.Entities.Bike", "Bike")
                        .WithMany()
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mottu.Domain.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mottu.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mottu.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AcceptedOrders");

                    b.Navigation("DeliveredOrders");

                    b.Navigation("NotificatedUsers");
                });

            modelBuilder.Entity("Mottu.Domain.Entities.Notification", b =>
                {
                    b.Navigation("NotificatedUsers");
                });

            modelBuilder.Entity("Mottu.Domain.Entities.Order", b =>
                {
                    b.Navigation("AcceptedOrders");

                    b.Navigation("DeliveredOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
